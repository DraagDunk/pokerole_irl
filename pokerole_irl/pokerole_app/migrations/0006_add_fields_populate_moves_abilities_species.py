# Generated by Django 3.2.16 on 2022-12-04 20:43

from django.db import migrations, models
import django.db.models.deletion

import json


def create_moves(apps, schema_editor):
    Move = apps.get_model('pokerole_app', 'Move')
    Type = apps.get_model('pokerole_app', 'Type')

    all_moves = json.load(open('static/Moves.json')).get("Move")

    categories_dict = {
        "Physical": "PH",
        "Special": "SP",
        "Support": "SU",
        "Invalid": None
    }

    for move in all_moves:

        try:
            move_type = Type.objects.get(
                name=move.get("Type").get("@DisplayName"))
        except:
            move_type = None

        Move.objects.update_or_create(name=move.get("Name"), defaults={
            'description': move.get("Description"),
            'power': move.get("Power"),
            'category': categories_dict[move.get("MoveCategory")],
            'move_type': move_type,
            'ranged': move.get("Ranged") == 'true',
            'target': move.get("MoveTarget"),
            'primary_accuracy': move.get("PrimaryAccuracyStat").get("@DisplayName"),
            'secondary_accuracy': move.get("SecondaryAccuracyStat").get("@DisplayName"),
            'reduced_accuracy': move.get("ReducedAccuracy"),
            'damage_stat': move.get("DamageStat").get("@DisplayName") if move.get("DamageStat") else None,
            'damage_modifier': 0,
            'additional_info': move.get("AdditionalInfo", "No info")
        })


def create_abilities(apps, schema_editor):
    Ability = apps.get_model('pokerole_app', 'Ability')

    all_abilities = json.load(open('static/Abilities.json')).get("Ability")

    for ability in all_abilities:
        Ability.objects.update_or_create(name=ability.get("Name"), defaults={
            'effect': ability.get("Effect")
        })


def create_pokemon_species(apps, schema_editor):
    Species = apps.get_model('pokerole_app', 'PokemonSpecies')
    Type = apps.get_model('pokerole_app', 'Type')
    Ability = apps.get_model('pokerole_app', 'Ability')
    Move = apps.get_model('pokerole_app', 'Move')

    all_species = json.load(open('static/DexEntries.json')).get("DexEntry")

    for species in all_species:
        primary_type_str = species.get("PrimaryType")
        secondary_type_str = species.get("SecondaryType")

        if primary_type_str:
            try:
                primary_type = Type.objects.get(
                    name=primary_type_str.get("@DisplayName"))
            except:
                primary_type = None
        else:
            primary_type = None
        if secondary_type_str:
            try:
                secondary_type = Type.objects.get(
                    name=secondary_type_str.get("@DisplayName"))
            except:
                secondary_type = None
        else:
            secondary_type = None

        Species.objects.update_or_create(name=species.get("Name"), defaults={
            'primary_type': primary_type or None,
            'secondary_type': secondary_type,
            'variant': species.get("Variant"),
            # Max stats
            'max_strength': species.get("MaxStrength"),
            'max_dexterity': species.get("MaxDexterity"),
            'max_vitality': species.get("MaxVitality"),
            'max_special': species.get("MaxSpecial"),
            'max_insight': species.get("MaxInsight"),
            # Base stats
            'base_hp': species.get("BaseHp"),
            'base_strength': species.get("StartingStrength"),
            'base_dexterity': species.get("StartingDexterity"),
            'base_vitality': species.get("StartingVitality"),
            'base_special': species.get("StartingSpecial"),
            'base_insight': species.get("StartingInsight"),
            # Dex entry
            'category': species.get("Category", "No category"),
            'description': species.get("Description", "No description"),
            'height': float(species.get("AverageHeight").get("@Value"))/10 if species.get("AverageHeight") else 0,
            'weight': float(species.get("AverageWeight").get("@Value"))/10 if species.get("AverageWeight") else 0,
        })

        pokemon = Species.objects.get(name=species.get("Name"))

        if species.get("MoveSet"):
            if isinstance(moves := species.get("MoveSet").get("MoveEntry"), list):
                for move in moves:
                    pokemon.moveset.add(
                        Move.objects.get(name=move.get("Move").get("@DisplayName")))
            else:
                Species.objects.get(name=species.get("Name")).moveset.add(
                    Move.objects.get(name=moves.get("Move").get("@DisplayName")))

        if species.get("Abilities"):
            if isinstance(abilities := species.get("Abilities").get("AbilityEntry"), list):
                for ability in abilities:
                    pokemon.abilities.add(Ability.objects.get(
                        name=ability.get("Ability").get("@DisplayName")))
            else:
                pokemon.abilities.add(Ability.objects.get(
                    name=abilities.get("Ability").get("@DisplayName")))


class Migration(migrations.Migration):

    dependencies = [
        ('pokerole_app', '0005_pokedex_and_entry_models'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='pokemonspecies',
            name='types',
        ),
        migrations.AddField(
            model_name='ability',
            name='effect',
            field=models.TextField(default='', max_length=1000),
        ),
        migrations.AddField(
            model_name='ability',
            name='name',
            field=models.CharField(default='', max_length=50),
        ),
        migrations.AddField(
            model_name='move',
            name='additional_info',
            field=models.TextField(blank=True, max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='category',
            field=models.CharField(blank=True, choices=[(
                'PH', 'Physical'), ('SP', 'Special'), ('SU', 'Support')], max_length=2, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='damage_modifier',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='damage_stat',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='description',
            field=models.TextField(
                blank=True, default='', max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='move_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='moves', to='pokerole_app.type'),
        ),
        migrations.AddField(
            model_name='move',
            name='name',
            field=models.CharField(default='', max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='move',
            name='power',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='primary_accuracy',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='ranged',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='move',
            name='reduced_accuracy',
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='secondary_accuracy',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='target',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='pokemonspecies',
            name='category',
            field=models.CharField(default='', max_length=50),
        ),
        migrations.AddField(
            model_name='pokemonspecies',
            name='primary_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='primary_species', to='pokerole_app.type'),
        ),
        migrations.AddField(
            model_name='pokemonspecies',
            name='secondary_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='secondary_species', to='pokerole_app.type'),
        ),
        migrations.RunPython(
            create_moves, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(
            create_abilities, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_pokemon_species,
                             reverse_code=migrations.RunPython.noop),
    ]
