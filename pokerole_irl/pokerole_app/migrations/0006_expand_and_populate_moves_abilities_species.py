# Generated by Django 3.2.16 on 2022-10-31 21:16

from django.db import migrations, models
import django.db.models.deletion

import json


def create_moves(apps, schema_editor):
    Move = apps.get_model('pokerole_app', 'Move')
    Type = apps.get_model('pokerole_app', 'Type')

    all_moves = json.load(open('static/json/Moves.json'))

    categories_dict = {
        "Physical": "PH",
        "Special": "SP",
        "Support": "SU",
        "Invalid": None
    }

    for move in all_moves:
        try:
            move_type = Type.objects.get(
                name=move['Type']['DisplayName']) or None
        except Type.DoesNotExist:
            move_type = None
        Move.objects.update_or_create(name=move['Name']['Name'], defaults={
            'description': move['Description']['Description'],
            'power': move['Power']['Power'],
            'category': categories_dict[move['MoveCategory']['MoveCategory']],
            'move_type': move_type,
            'ranged': move['Ranged']['Ranged'] == 'true',
            'primary_accuracy': move['PrimaryAccuracyStat']['DisplayName'],
            'secondary_accuracy': move['SecondaryAccuracyStat']['DisplayName'],
            'reduced_accuracy': move['ReducedAccuracy']['ReducedAccuracy'],
            'damage_stat': move['DamageStat']['DisplayName'] if "DamageStat" in move else None,
            'damage_modifier': move['DamageModifier']['DamageModifier'],
            'additional_info': move['AdditionalInfo']['AdditionalInfo'] if 'AdditionalInfo' in move else ""
        })


def create_abilities(apps, schema_editor):
    Ability = apps.get_model('pokerole_app', 'Ability')

    all_abilities = json.load(open('static/json/Abilities.json'))

    for ability in all_abilities:
        Ability.objects.update_or_create(name=ability['Name']['Name'], defaults={
            'effect': ability['Effect']['Effect']
        })


def create_pokemon_species(apps, schema_editor):
    Species = apps.get_model('pokerole_app', 'PokemonSpecies')
    Type = apps.get_model('pokerole_app', 'Type')
    # Ability = apps.get_model('pokerole_app', 'Ability')
    # Move = apps.get_model('pokerole_app', 'Move')

    all_species = json.load(open('static/json/DexEntries.json'))

    for species in all_species:
        try:
            primary_type = Type.objects.get(
                name=species['PrimaryType']['DisplayName'])
        except Type.DoesNotExist:
            continue
        try:
            secondary_type = Type.objects.get(
                name=species['SecondaryType']['DisplayName'])
        except (Type.DoesNotExist, KeyError):
            secondary_type = None

        try:
            height = float(species['AverageHeight']['Value'])/10
        except KeyError:
            height = float(0)
        try:
            weight = float(species['AverageWeight']['Value'])/10
        except KeyError:
            weight = float(0)

        try:
            category = species['Category']['Category']
        except KeyError:
            category = ""
        try:
            description = species['DexDescription']['DexDescription']
        except KeyError:
            description = ""

        Species.objects.update_or_create(name=species['Name']['Name'], defaults={
            'primary_type': primary_type,
            'secondary_type': secondary_type,
            'variant': species['Variant']['Variant'],
            # Max stats
            'max_strength': species['MaxStrength']['MaxStrength'],
            'max_dexterity': species['MaxDexterity']['MaxDexterity'],
            'max_vitality': species['MaxVitality']['MaxVitality'],
            'max_special': species['MaxSpecial']['MaxSpecial'],
            'max_insight': species['MaxInsight']['MaxInsight'],
            # Base stats
            'base_hp': species['BaseHp']['BaseHp'],
            'base_strength': species['StartingStrength']['StartingStrength'],
            'base_dexterity': species['StartingDexterity']['StartingDexterity'],
            'base_vitality': species['StartingVitality']['StartingVitality'],
            'base_special': species['StartingSpecial']['StartingSpecial'],
            'base_insight': species['StartingInsight']['StartingInsight'],
            # Dex entry
            'category': category,
            'description': description,
            'height': height,
            'weight': weight,
        })


class Migration(migrations.Migration):

    dependencies = [
        ('pokerole_app', '0005_pokedex_and_entry_models'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='pokemonspecies',
            name='types',
        ),
        migrations.AddField(
            model_name='ability',
            name='effect',
            field=models.TextField(default='', max_length=1000),
        ),
        migrations.AddField(
            model_name='ability',
            name='name',
            field=models.CharField(default='', max_length=50),
        ),
        migrations.AddField(
            model_name='move',
            name='additional_info',
            field=models.TextField(blank=True, max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='category',
            field=models.CharField(blank=True, choices=[(
                'PH', 'Physical'), ('SP', 'Special'), ('SU', 'Support')], max_length=2, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='damage_modifier',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='damage_stat',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='description',
            field=models.TextField(
                blank=True, default='', max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='move_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='moves', to='pokerole_app.type'),
        ),
        migrations.AddField(
            model_name='move',
            name='name',
            field=models.CharField(default='', max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='move',
            name='power',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='primary_accuracy',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='ranged',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='move',
            name='reduced_accuracy',
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
        migrations.AddField(
            model_name='move',
            name='secondary_accuracy',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='pokemonspecies',
            name='category',
            field=models.CharField(default='', max_length=50),
        ),
        migrations.AddField(
            model_name='pokemonspecies',
            name='primary_type',
            field=models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.PROTECT,
                                    related_name='primary_species', to='pokerole_app.type'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pokemonspecies',
            name='secondary_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='secondary_species', to='pokerole_app.type'),
        ),
        migrations.RunPython(
            create_moves, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(
            create_abilities, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_pokemon_species,
                             reverse_code=migrations.RunPython.noop),
    ]
